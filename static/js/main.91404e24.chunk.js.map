{"version":3,"sources":["Modal.tsx","App.tsx","index.tsx"],"names":["modalContentStyle","css","modalStyle","Modal","props","this","show","className","id","movieInfo","onClick","handleClose","React","Component","appStyle","loadingStyle","titleStyle","headerStyle","tableStyle","tableRowStyle","tableRowStyleTitle","buttonStyle","searchStyle","App","loadPages","pages","i","fetch","state","keyword","toString","then","res","json","renderMovies","movies","length","totalRes","setState","loaded","response","concat","Search","onClearArray","Array","showModal","hideModal","renderMovieInfo","index","imdbID","Title","Year","Metascore","Released","Runtime","Genre","Director","writer","Actors","Plot","Language","Country","Awards","Poster","console","log","keyWordChanged","event","target","value","descYearSort","alphaBSort","typeSort","toggleSortTitle","bind","toggleSortYear","toggleSortType","handleSubmit","sortYear","sortType","sortTitle","arr","sort","a","b","Type","totalResults","checkDone","header","Object","keys","unshift","map","key","click","toUpperCase","movie","height","width","src","alt","onChange","placeholder","type","renderTableHeader","renderTableData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91404e24.chunk.js","sourcesContent":["import React from 'react'\r\nimport App from './App'\r\nimport {css} from 'emotion'\r\nimport { listenerCount } from 'cluster'\r\n\r\ninterface IMovieInfo {\r\n    Title: string,\r\n    Year: number,\r\n    Metascore: string,\r\n    Released: string,\r\n    Runtime: string,\r\n    Genre: string,\r\n    Director: string,\r\n    writer: string,\r\n    Actors: string,\r\n    Plot:string,\r\n    Language: string,\r\n    Country: string,\r\n    Awards:string,\r\n    Poster:string,\r\n  }\r\n\r\ninterface IOwnState{\r\n    show:boolean\r\n  }\r\n  \r\n  interface IOwnprops{\r\n    show:boolean,\r\n    handleClose:any,\r\n    movieInfo: Array<IMovieInfo>\r\n  }\r\n\r\n  const modalContentStyle = css`\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  background-color: #fefefe;\r\n  margin: auto;\r\n  margin-top: 100px;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  max-width: 600px;\r\n  height: 300px;\r\n`\r\n\r\n\r\nconst modalStyle = css`\r\n  display: block;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 9999;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-top: 100px;\r\n  background-color: black;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n  -webkit-transition: 0.5s;\r\n  overflow: auto;\r\n  transition: all 0.3s linear;\r\n`\r\n\r\n  class Modal extends React.Component<IOwnprops,IOwnState> {\r\n    constructor(props:IOwnprops){\r\n      super(props)\r\n    }\r\n\r\n    \r\n    render() {\r\n      if(!this.props.show){\r\n      return null\r\n      } else{\r\n        return (\r\n        <div className={modalStyle} id=\"modal\">\r\n            <div className={modalContentStyle}>\r\n              <h2>{this.props.movieInfo[0]}</h2>\r\n             <h4>Rating: {this.props.movieInfo[2]}</h4>\r\n             <p>plot: {this.props.movieInfo[9]}</p>\r\n             <p>Actors: {this.props.movieInfo[8]}</p>\r\n             <p>Runtime: {this.props.movieInfo[4]} Director: {this.props.movieInfo[6]}</p>\r\n             <p>language: {this.props.movieInfo[10]}</p>\r\n             <p>Genre: {this.props.movieInfo[5]}</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <button\r\n                  onClick={this.props.handleClose}\r\n                >\r\n                  Close\r\n                </button>\r\n            </div>\r\n        </div>\r\n        )\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  export default Modal","import React, { Component, FormEvent } from 'react'\r\nimport { css } from 'emotion'\r\nimport Modal from './Modal'\r\n\r\n\r\nconst appStyle = css`\r\ntext-align: center; \r\n`\r\n\r\nconst loadingStyle = css`\r\nfont-family: \"Trebuchet MS\", Arial, sans-serif;\r\nleft: 0;\r\nline-height: 200px;\r\nmargin-top: -100px;\r\nposition: absolute;\r\ntext-align: center;\r\ntop: 50%;\r\nwidth: 100%;\r\nfont-size: 50px;\r\n`\r\n\r\nconst titleStyle = css`\r\nfont-family: \"Trebuchet MS\", Arial, sans-serif;\r\nfont-size: 45px;\r\n`\r\n\r\nconst headerStyle = css`\r\npadding-top: 12px;\r\npadding-bottom: 12px;\r\ntext-align: center;\r\nbackground-color: #4FF229;\r\nborder: 2px solid black;\r\ncolor: white;\r\nheight: 40px;\r\ncursor:pointer;\r\n&:hover{\r\n  background-color: #478a34;\r\n}\r\n`\r\n\r\nconst tableStyle = css`\r\ntext-align: center;\r\nfont-family: \"Trebuchet MS\", Arial, sans-serif;\r\nborder-collapse: collapse;\r\nborder: 3px solid black;\r\nwidth: 90%;\r\nmargin-left:auto; \r\nmargin-right:auto;\r\n`\r\n\r\nconst tableRowStyle = css`\r\nborder: 2px solid black;\r\npadding: 8px;\r\n`\r\n\r\nconst tableRowStyleTitle = css`\r\nborder: 2px solid black;\r\npadding: 8px;\r\ncursor: pointer;\r\n&:hover{\r\n  background-color: darkgray;\r\n}\r\n`\r\n\r\nconst buttonStyle = css`\r\nborder: 2px solid black;\r\npadding: 8px;\r\nwidth: 70px;\r\n&:hover{\r\n  background-color: darkgray;\r\n}\r\n`\r\nconst searchStyle = css`\r\nborder: 2px solid black;\r\npadding: 8px;\r\nmargin:10px;\r\nwidth: 200px;\r\n`\r\n\r\ninterface IMovie {\r\n  Id: number,\r\n  Title: string,\r\n  Year: number,\r\n  Type: string,\r\n  Poster: string,\r\n  imdbID: string,\r\n}\r\n\r\ninterface IMovieInfo {\r\n  Title: string,\r\n  Year: number,\r\n  Metascore: string,\r\n  Released: string,\r\n  Runtime: string,\r\n  Genre: string,\r\n  Director: string,\r\n  writer: string,\r\n  Actors: string,\r\n  Plot:string,\r\n  Language: string,\r\n  Country: string,\r\n  Awards:string,\r\n  Poster:string,\r\n}\r\n\r\ninterface IOwnprops {\r\n}\r\n\r\ninterface IOwnState {\r\n  movies: Array<IMovie>,\r\n  movieInfo: Array<IMovieInfo>,\r\n  loaded: boolean,\r\n  totalRes: number,\r\n  keyword: string,\r\n  descYearSort: boolean,\r\n  alphaBSort:boolean,\r\n  typeSort:boolean,\r\n  show:boolean,\r\n}\r\n\r\nclass App extends Component<IOwnprops, IOwnState, HTMLButtonElement>{\r\n  constructor(props: IOwnprops) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      movies: Array<IMovie>(),\r\n      movieInfo: Array<IMovieInfo>(),\r\n      loaded: false,\r\n      totalRes: 0,\r\n      keyword: '',\r\n      descYearSort: true,\r\n      alphaBSort:true,\r\n      typeSort:true,\r\n      show:false,\r\n    }\r\n\r\n    this.toggleSortTitle = this.toggleSortTitle.bind(this)\r\n    this.toggleSortYear = this.toggleSortYear.bind(this)\r\n    this.toggleSortType = this.toggleSortType.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.sortYear = this.sortYear.bind(this)\r\n    this.sortType = this.sortType.bind(this)\r\n    this.sortTitle = this.sortTitle.bind(this)\r\n    this.renderMovieInfo = this.renderMovieInfo.bind(this)\r\n  }\r\n\r\n  sortYear() {\r\n    let arr = []\r\n    arr = this.state.movies\r\n    if (this.state.descYearSort) {\r\n      arr.sort((a, b) => {\r\n        if (a.Year < b.Year) {\r\n          return -1;\r\n        }\r\n        if (a.Year > b.Year) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n    } else {\r\n      arr.sort((a, b) => {\r\n        if (a.Year > b.Year) {\r\n          return -1\r\n        }\r\n        if (a.Year < b.Year) {\r\n          return 1\r\n        }\r\n        return 0\r\n      })\r\n      this.setState({\r\n        movies: arr\r\n      })\r\n    }\r\n  }\r\n\r\n  toggleSortYear(){\r\n    this.sortYear()\r\n    this.setState({\r\n      descYearSort: !this.state.descYearSort\r\n    })\r\n  }\r\n\r\n  toggleSortTitle(){\r\n    this.sortTitle()\r\n    this.setState({\r\n      alphaBSort: !this.state.alphaBSort\r\n    })\r\n  }\r\n\r\n  toggleSortType(){\r\n    this.sortType()\r\n    this.setState({\r\n      typeSort: !this.state.typeSort\r\n    })\r\n  }\r\n\r\n  sortTitle(){\r\n\r\n      let arr = []\r\n      arr = this.state.movies\r\n      if(this.state.alphaBSort){\r\n      arr.sort((a, b) => {\r\n        if (a.Title < b.Title) {\r\n          return -1;\r\n        }\r\n        if (a.Title > b.Title) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n    }else{\r\n      arr.sort((a, b) => {\r\n        if (a.Title > b.Title) {\r\n          return -1;\r\n        }\r\n        if (a.Title < b.Title) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n    }\r\n      this.setState({\r\n        movies: arr\r\n      })\r\n    }\r\n\r\n    sortType(){\r\n      let arr = []\r\n      arr = this.state.movies\r\n\r\n      if(this.state.typeSort){\r\n\r\n      arr.sort((a, b) => {\r\n        if (a.Type > b.Type) {\r\n          return -1;\r\n        }\r\n        if (a.Type < b.Type) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n    }\r\n    else{\r\n      arr.sort((a, b) => {\r\n        if (a.Type < b.Type) {\r\n          return -1;\r\n        }\r\n        if (a.Type > b.Type) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      })\r\n    }\r\n      this.setState({\r\n        movies: arr\r\n      })\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({\r\n        loaded: true\r\n      })\r\n    }\r\n\r\n    handleSubmit(event: FormEvent) {\r\n      this.onClearArray()\r\n      fetch(\"https://www.omdbapi.com/?apikey=74987db8&s=\" + this.state.keyword)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          this.loadPages(json.totalResults)\r\n        })\r\n        .then(() => {if(this.checkDone())\r\n          {\r\n          this.setState({\r\n            loaded:true\r\n          })\r\n        }\r\n        }\r\n        )\r\n    }\r\n\r\n    loadPages = ((pages: number) => {\r\n      for (let i = 0; i < pages / 10; i++) {\r\n        fetch(\"https://www.omdbapi.com/?apikey=74987db8&s=\" + this.state.keyword\r\n          + \"&page=\" + (i + 1).toString())\r\n          .then(res => res.json())\r\n          .then(this.renderMovies)\r\n      }\r\n      if(this.state.movies.length === this.state.totalRes){this.setState({\r\n        loaded:true,\r\n      })}\r\n    })\r\n\r\n    renderMovies = ((response: any) => {\r\n      this.setState(state => {\r\n        let list = this.state.movies.concat(response.Search)\r\n        return {\r\n          movies: list\r\n        }\r\n      })\r\n    })\r\n\r\n\r\n\r\n    onClearArray = () => {\r\n      this.setState({ movies: Array<IMovie>() });\r\n      this.setState({\r\n        loaded:false,\r\n      })\r\n    }\r\n\r\n    renderTableHeader() {\r\n      if (this.state.movies.length > 0) {\r\n        let header = Object.keys(this.state.movies[0])\r\n        delete header[2]\r\n        header.unshift(\"id\")\r\n        return header.map((key, index) => {\r\n          let click\r\n          switch (key) {\r\n            case \"Title\":\r\n              click = this.toggleSortTitle\r\n              break;\r\n            case \"Type\":\r\n              click = this.toggleSortType\r\n              break;\r\n            case \"Year\":\r\n              click = this.toggleSortYear\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          return <th\r\n            onClick={click}\r\n            className={headerStyle}\r\n            key={index}>\r\n            {key.toUpperCase()}\r\n          </th>\r\n        })\r\n      }\r\n      else {\r\n        return (<th>no results</th>)\r\n      }\r\n    }\r\n\r\n    showModal = () => {\r\n      this.setState({\r\n        show:!this.state.show\r\n      })\r\n    }\r\n    hideModal = () => {\r\n      this.setState({\r\n        show:false,\r\n      })\r\n    }\r\n\r\n    renderMovieInfo = (index:number) =>{\r\n      fetch(\"https://www.omdbapi.com/?apikey=74987db8&i=\" + this.state.movies[index].imdbID)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        this.setState({\r\n          movieInfo: Array<IMovieInfo>(json.Title,json.Year,json.Metascore,json.Released,json.Runtime,json.Genre,json.Director,json.writer,json.Actors,json.Plot,json.Language,json.Country,json.Awards,json.Poster)\r\n        })\r\n      })\r\n\r\n      this.showModal()\r\n      console.log(index)\r\n    }\r\n\r\n    renderTableData() {\r\n      if (this.state.movies.length > 0) {\r\n        return this.state.movies.map((movie, index) => {\r\n          const { Title, Year, Type, Poster} = movie\r\n\r\n          return (\r\n            <tr>\r\n              <td className={tableRowStyle}>{index + 1}</td>\r\n              <td onClick={()=>this.renderMovieInfo(index)} className={tableRowStyleTitle}>{Title}</td>\r\n              <td className={tableRowStyle}>{Year}</td>\r\n              <td className={tableRowStyle}>{Type}</td>\r\n              <td className={tableRowStyle}><img height=\"100px\" width=\"70px\" src={Poster} alt=\"poster picture missing\" /></td>\r\n            </tr>\r\n          )\r\n        })\r\n       } else { return (<p>nothing found</p>) }\r\n    }\r\n\r\n\r\n    keyWordChanged = ((event: any) => {\r\n      this.setState({\r\n        keyword: event.target.value\r\n      })\r\n    })\r\n\r\n    checkDone(){\r\n      return(this.state.movies.length === this.state.totalRes)\r\n    }\r\n\r\n    render() {\r\n\r\n      if (!this.state.loaded) {\r\n        return <div className={appStyle}>\r\n          <h1 className={loadingStyle}>Loading...</h1>\r\n        </div>\r\n      }\r\n      else {\r\n        return (\r\n          <div className={appStyle}>\r\n            <h1 className={titleStyle}>Movie table</h1>\r\n            <input\r\n              id=\"search\"\r\n              value={this.state.keyword}\r\n              onChange={this.keyWordChanged}\r\n              className={searchStyle}\r\n              placeholder=\"search for a movie by title\"\r\n              type=\"textfield\"></input>\r\n            <button\r\n              onClick={this.handleSubmit}\r\n              className={buttonStyle}>\r\n              Search\r\n          </button>\r\n            <table className={tableStyle}>\r\n              <thead>\r\n                {this.renderTableHeader()}\r\n              </thead>\r\n              <tbody>\r\n                {this.renderTableData()}\r\n              </tbody>\r\n            </table>\r\n            <Modal movieInfo= {this.state.movieInfo} show={this.state.show} handleClose = {this.hideModal}/>\r\n          </div>\r\n        )\r\n      }\r\n\r\n    }\r\n  }\r\n  export default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}