{"version":3,"sources":["Modal.tsx","App.tsx","index.tsx"],"names":["modalContentStyle","css","modalStyle","Modal","props","this","show","className","id","movieInfo","onClick","handleClose","React","Component","appStyle","loadingStyle","titleStyle","headerStyle","tableStyle","tableRowStyle","tableRowStyleTitle","buttonStyle","searchStyle","App","loadPages","pages","i","fetch","state","keyword","toString","then","res","json","renderMovies","setState","loaded","response","movies","concat","Search","onClearArray","Array","showModal","hideModal","renderMovieInfo","index","imdbID","Title","Year","Metascore","Released","Runtime","Genre","Director","writer","Actors","Plot","Language","Country","Awards","Poster","console","log","keyWordChanged","event","target","value","totalRes","descYearSort","alphaBSort","typeSort","toggleSortTitle","bind","toggleSortYear","toggleSortType","handleSubmit","sortYear","sortType","sortTitle","arr","sort","a","b","Type","totalResults","length","header","Object","keys","unshift","map","key","click","toUpperCase","movie","height","width","src","alt","undefined","onChange","placeholder","type","renderTableHeader","renderTableData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8b38709.chunk.js","sourcesContent":["import React from 'react'\r\nimport App from './App'\r\nimport {css} from 'emotion'\r\nimport { listenerCount } from 'cluster'\r\n\r\ninterface IMovieInfo {\r\n    Title: string,\r\n    Year: number,\r\n    Metascore: string,\r\n    Released: string,\r\n    Runtime: string,\r\n    Genre: string,\r\n    Director: string,\r\n    writer: string,\r\n    Actors: string,\r\n    Plot:string,\r\n    Language: string,\r\n    Country: string,\r\n    Awards:string,\r\n    Poster:string,\r\n  }\r\n\r\ninterface IOwnState{\r\n    show:boolean\r\n  }\r\n  \r\n  interface IOwnprops{\r\n    show:boolean,\r\n    handleClose:any,\r\n    movieInfo: Array<IMovieInfo>\r\n  }\r\n\r\n  const modalContentStyle = css`\r\n  font-family: \"Trebuchet MS\", Arial, sans-serif;\r\n  background-color: #fefefe;\r\n  margin: auto;\r\n  margin-top: 100px;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  max-width: 600px;\r\n  height: 300px;\r\n`\r\n\r\n\r\nconst modalStyle = css`\r\n  display: block;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 9999;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-top: 100px;\r\n  background-color: black;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n  -webkit-transition: 0.5s;\r\n  overflow: auto;\r\n  transition: all 0.3s linear;\r\n`\r\n\r\n  class Modal extends React.Component<IOwnprops,IOwnState> {\r\n    constructor(props:IOwnprops){\r\n      super(props)\r\n    }\r\n\r\n    \r\n    render() {\r\n      if(!this.props.show){\r\n      return null\r\n      } else{\r\n        return (\r\n        <div className={modalStyle} id=\"modal\">\r\n            <div className={modalContentStyle}>\r\n              <h2>{this.props.movieInfo[0]}</h2>\r\n             <h4>Rating: {this.props.movieInfo[2]}/100 (source: metacritic)</h4>\r\n             <p>plot: {this.props.movieInfo[9]}</p>\r\n             <p>Actors: {this.props.movieInfo[8]}</p>\r\n             <p>Runtime: {this.props.movieInfo[4]} Director: {this.props.movieInfo[6]}</p>\r\n             <p>language: {this.props.movieInfo[10]}</p>\r\n             <p>Genre: {this.props.movieInfo[5]}</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <button\r\n                  onClick={this.props.handleClose}\r\n                >\r\n                  Close\r\n                </button>\r\n            </div>\r\n        </div>\r\n        )\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  export default Modal","import React, { Component, FormEvent } from 'react'\nimport { css } from 'emotion'\nimport Modal from './Modal'\n\n\nconst appStyle = css`\ntext-align: center; \n`\n\nconst loadingStyle = css`\nfont-family: \"Trebuchet MS\", Arial, sans-serif;\nleft: 0;\nline-height: 200px;\nmargin-top: -100px;\nposition: absolute;\ntext-align: center;\ntop: 50%;\nwidth: 100%;\nfont-size: 50px;\n`\n\nconst titleStyle = css`\nfont-family: \"Trebuchet MS\", Arial, sans-serif;\nfont-size: 45px;\n`\n\nconst headerStyle = css`\npadding-top: 12px;\npadding-bottom: 12px;\ntext-align: center;\nbackground-color: #4FF229;\nborder: 2px solid black;\ncolor: white;\nheight: 40px;\ncursor:pointer;\n&:hover{\n  background-color: #478a34;\n}\n`\n\nconst tableStyle = css`\ntext-align: center;\nfont-family: \"Trebuchet MS\", Arial, sans-serif;\nborder-collapse: collapse;\nborder: 3px solid black;\nwidth: 90%;\nmargin-left:auto; \nmargin-right:auto;\n`\n\nconst tableRowStyle = css`\nborder: 2px solid black;\npadding: 8px;\n`\n\nconst tableRowStyleTitle = css`\nborder: 2px solid black;\npadding: 8px;\ncursor: pointer;\n&:hover{\n  background-color: darkgray;\n}\n`\n\nconst buttonStyle = css`\nborder: 2px solid black;\npadding: 8px;\nwidth: 70px;\n&:hover{\n  background-color: darkgray;\n}\n`\nconst searchStyle = css`\nborder: 2px solid black;\npadding: 8px;\nmargin:10px;\nwidth: 200px;\n`\n\ninterface IMovie {\n  Id: number,\n  Title: string,\n  Year: number,\n  Type: string,\n  Poster: string,\n  imdbID: string,\n}\n\ninterface IMovieInfo {\n  Title: string,\n  Year: number,\n  Metascore: string,\n  Released: string,\n  Runtime: string,\n  Genre: string,\n  Director: string,\n  writer: string,\n  Actors: string,\n  Plot:string,\n  Language: string,\n  Country: string,\n  Awards:string,\n  Poster:string,\n}\n\ninterface IOwnprops {\n}\n\ninterface IOwnState {\n  movies: Array<IMovie>,\n  movieInfo: Array<IMovieInfo>,\n  loaded: boolean,\n  totalRes: number,\n  keyword: string,\n  descYearSort: boolean,\n  alphaBSort:boolean,\n  typeSort:boolean,\n  show:boolean,\n}\n\nclass App extends Component<IOwnprops, IOwnState, HTMLButtonElement>{\n  constructor(props: IOwnprops) {\n    super(props)\n\n    this.state = {\n      movies: Array<IMovie>(),\n      movieInfo: Array<IMovieInfo>(),\n      loaded: false,\n      totalRes: 0,\n      keyword: '',\n      descYearSort: true,\n      alphaBSort:true,\n      typeSort:true,\n      show:false,\n    }\n\n    this.toggleSortTitle = this.toggleSortTitle.bind(this)\n    this.toggleSortYear = this.toggleSortYear.bind(this)\n    this.toggleSortType = this.toggleSortType.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.sortYear = this.sortYear.bind(this)\n    this.sortType = this.sortType.bind(this)\n    this.sortTitle = this.sortTitle.bind(this)\n    this.renderMovieInfo = this.renderMovieInfo.bind(this)\n  }\n\n  sortYear() {\n    let arr = []\n    arr = this.state.movies\n    if (this.state.descYearSort) {\n      arr.sort((a, b) => {\n        if (a.Year < b.Year) {\n          return -1;\n        }\n        if (a.Year > b.Year) {\n          return 1;\n        }\n        return 0;\n      })\n    } else {\n      arr.sort((a, b) => {\n        if (a.Year > b.Year) {\n          return -1\n        }\n        if (a.Year < b.Year) {\n          return 1\n        }\n        return 0\n      })\n      this.setState({\n        movies: arr\n      })\n    }\n  }\n\n  toggleSortYear(){\n    this.sortYear()\n    this.setState({\n      descYearSort: !this.state.descYearSort\n    })\n  }\n\n  toggleSortTitle(){\n    this.sortTitle()\n    this.setState({\n      alphaBSort: !this.state.alphaBSort\n    })\n  }\n\n  toggleSortType(){\n    this.sortType()\n    this.setState({\n      typeSort: !this.state.typeSort\n    })\n  }\n\n  sortTitle(){\n\n      let arr = []\n      arr = this.state.movies\n      if(this.state.alphaBSort){\n      arr.sort((a, b) => {\n        if (a.Title < b.Title) {\n          return -1;\n        }\n        if (a.Title > b.Title) {\n          return 1;\n        }\n        return 0;\n      })\n    }else{\n      arr.sort((a, b) => {\n        if (a.Title > b.Title) {\n          return -1;\n        }\n        if (a.Title < b.Title) {\n          return 1;\n        }\n        return 0;\n      })\n    }\n      this.setState({\n        movies: arr\n      })\n    }\n\n    sortType(){\n      let arr = []\n      arr = this.state.movies\n\n      if(this.state.typeSort){\n\n      arr.sort((a, b) => {\n        if (a.Type > b.Type) {\n          return -1;\n        }\n        if (a.Type < b.Type) {\n          return 1;\n        }\n        return 0;\n      })\n    }\n    else{\n      arr.sort((a, b) => {\n        if (a.Type < b.Type) {\n          return -1;\n        }\n        if (a.Type > b.Type) {\n          return 1;\n        }\n        return 0;\n      })\n    }\n      this.setState({\n        movies: arr\n      })\n    }\n\n    componentDidMount() {\n      this.setState({\n        loaded: true\n      })\n    }\n\n    handleSubmit(event: FormEvent) {\n      this.onClearArray()\n      fetch(\"http://www.omdbapi.com/?apikey=74987db8&s=\" + this.state.keyword)\n        .then(res => res.json())\n        .then(json => {\n          this.loadPages(json.totalResults)\n        })\n    }\n\n    loadPages = ((pages: number) => {\n      for (let i = 0; i < pages / 10; i++) {\n        fetch(\"http://www.omdbapi.com/?apikey=74987db8&s=\" + this.state.keyword\n          + \"&page=\" + (i + 1).toString())\n          .then(res => res.json())\n          .then(this.renderMovies)\n          .then(() =>{this.setState({ loaded: true })})\n      }\n    })\n\n    renderMovies = ((response: any) => {\n      this.setState(state => {\n        let list = this.state.movies.concat(response.Search)\n        return {\n          movies: list\n        }\n      })\n    })\n\n\n\n    onClearArray = () => {\n      this.setState({ movies: Array<IMovie>() });\n      this.setState({\n        loaded:false,\n      })\n    }\n\n    renderTableHeader() {\n      if (this.state.movies != null && this.state.movies.length > 0) {\n        let header = Object.keys(this.state.movies[0])\n        delete header[2]\n        header.unshift(\"id\")\n        return header.map((key, index) => {\n          let click\n          switch (key) {\n            case \"Title\":\n              click = this.toggleSortTitle\n              break;\n            case \"Type\":\n              click = this.toggleSortType\n              break;\n            case \"Year\":\n              click = this.toggleSortYear\n              break;\n            default:\n              break;\n          }\n          return <th\n            onClick={click}\n            className={headerStyle}\n            key={index}>\n            {key.toUpperCase()}\n          </th>\n        })\n      }\n      else {\n        return (<th>no results</th>)\n      }\n    }\n\n    showModal = () => {\n      this.setState({\n        show:!this.state.show\n      })\n    }\n    hideModal = () => {\n      this.setState({\n        show:false,\n      })\n    }\n\n    renderMovieInfo = (index:number) =>{\n      fetch(\"http://www.omdbapi.com/?apikey=74987db8&i=\" + this.state.movies[index].imdbID)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          movieInfo: Array<IMovieInfo>(json.Title,json.Year,json.Metascore,json.Released,json.Runtime,json.Genre,json.Director,json.writer,json.Actors,json.Plot,json.Language,json.Country,json.Awards,json.Poster)\n        })\n      })\n\n      this.showModal()\n      console.log(index)\n    }\n\n    renderTableData() {\n      if (this.state.movies != null && this.state.movies.length > 0) {\n        return this.state.movies.map((movie, index) => {\n          const { Title, Year, Type, Poster} = movie\n\n          return (\n            <tr>\n              <td className={tableRowStyle}>{index + 1}</td>\n              <td onClick={()=>this.renderMovieInfo(index)} className={tableRowStyleTitle}>{Title}</td>\n              <td className={tableRowStyle}>{Year}</td>\n              <td className={tableRowStyle}>{Type}</td>\n              <td className={tableRowStyle}><img height=\"100px\" width=\"70px\" src={Poster} alt=\"poster picture missing\" /></td>\n            </tr>\n          )\n        })\n       } else { return (<p>nothing found</p>) }\n    }\n\n\n    keyWordChanged = ((event: any) => {\n      this.setState({\n        keyword: event.target.value\n      })\n    })\n\n    render() {\n\n      if (!this.state.loaded || this.state.movies == undefined) {\n        return <div className={appStyle}>\n          <h1 className={loadingStyle}>Loading...</h1>\n        </div>\n      }\n      else {\n        return (\n          <div className={appStyle}>\n            <h1 className={titleStyle}>Movie table</h1>\n            <input\n              id=\"search\"\n              value={this.state.keyword}\n              onChange={this.keyWordChanged}\n              className={searchStyle}\n              placeholder=\"search for a movie by title\"\n              type=\"textfield\"></input>\n            <button\n              onClick={this.handleSubmit}\n              className={buttonStyle}>\n              Search\n          </button>\n            <table className={tableStyle}>\n              <thead>\n                {this.renderTableHeader()}\n              </thead>\n              <tbody>\n                {this.renderTableData()}\n              </tbody>\n            </table>\n            <Modal movieInfo= {this.state.movieInfo} show={this.state.show} handleClose = {this.hideModal}/>\n          </div>\n        )\n      }\n\n    }\n  }\n  export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}